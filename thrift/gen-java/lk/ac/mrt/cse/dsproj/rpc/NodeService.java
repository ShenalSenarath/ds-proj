/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lk.ac.mrt.cse.dsproj.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-08")
public class NodeService {

  public interface Iface {

    public String join(String requesterIP, int requesterPort) throws org.apache.thrift.TException;

    public void search(String keyWord, String requesterIP, String requesterPort, int hops) throws org.apache.thrift.TException;

    public void sendResult(String senderIP, String senderPort, String resultFiles) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void join(String requesterIP, int requesterPort, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void search(String keyWord, String requesterIP, String requesterPort, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendResult(String senderIP, String senderPort, String resultFiles, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String join(String requesterIP, int requesterPort) throws org.apache.thrift.TException
    {
      send_join(requesterIP, requesterPort);
      return recv_join();
    }

    public void send_join(String requesterIP, int requesterPort) throws org.apache.thrift.TException
    {
      join_args args = new join_args();
      args.setRequesterIP(requesterIP);
      args.setRequesterPort(requesterPort);
      sendBase("join", args);
    }

    public String recv_join() throws org.apache.thrift.TException
    {
      join_result result = new join_result();
      receiveBase(result, "join");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "join failed: unknown result");
    }

    public void search(String keyWord, String requesterIP, String requesterPort, int hops) throws org.apache.thrift.TException
    {
      send_search(keyWord, requesterIP, requesterPort, hops);
      recv_search();
    }

    public void send_search(String keyWord, String requesterIP, String requesterPort, int hops) throws org.apache.thrift.TException
    {
      search_args args = new search_args();
      args.setKeyWord(keyWord);
      args.setRequesterIP(requesterIP);
      args.setRequesterPort(requesterPort);
      args.setHops(hops);
      sendBase("search", args);
    }

    public void recv_search() throws org.apache.thrift.TException
    {
      search_result result = new search_result();
      receiveBase(result, "search");
      return;
    }

    public void sendResult(String senderIP, String senderPort, String resultFiles) throws org.apache.thrift.TException
    {
      send_sendResult(senderIP, senderPort, resultFiles);
      recv_sendResult();
    }

    public void send_sendResult(String senderIP, String senderPort, String resultFiles) throws org.apache.thrift.TException
    {
      sendResult_args args = new sendResult_args();
      args.setSenderIP(senderIP);
      args.setSenderPort(senderPort);
      args.setResultFiles(resultFiles);
      sendBase("sendResult", args);
    }

    public void recv_sendResult() throws org.apache.thrift.TException
    {
      sendResult_result result = new sendResult_result();
      receiveBase(result, "sendResult");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void join(String requesterIP, int requesterPort, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      join_call method_call = new join_call(requesterIP, requesterPort, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class join_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requesterIP;
      private int requesterPort;
      public join_call(String requesterIP, int requesterPort, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requesterIP = requesterIP;
        this.requesterPort = requesterPort;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("join", org.apache.thrift.protocol.TMessageType.CALL, 0));
        join_args args = new join_args();
        args.setRequesterIP(requesterIP);
        args.setRequesterPort(requesterPort);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_join();
      }
    }

    public void search(String keyWord, String requesterIP, String requesterPort, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      search_call method_call = new search_call(keyWord, requesterIP, requesterPort, hops, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class search_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String keyWord;
      private String requesterIP;
      private String requesterPort;
      private int hops;
      public search_call(String keyWord, String requesterIP, String requesterPort, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyWord = keyWord;
        this.requesterIP = requesterIP;
        this.requesterPort = requesterPort;
        this.hops = hops;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("search", org.apache.thrift.protocol.TMessageType.CALL, 0));
        search_args args = new search_args();
        args.setKeyWord(keyWord);
        args.setRequesterIP(requesterIP);
        args.setRequesterPort(requesterPort);
        args.setHops(hops);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_search();
      }
    }

    public void sendResult(String senderIP, String senderPort, String resultFiles, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendResult_call method_call = new sendResult_call(senderIP, senderPort, resultFiles, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String senderIP;
      private String senderPort;
      private String resultFiles;
      public sendResult_call(String senderIP, String senderPort, String resultFiles, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.senderIP = senderIP;
        this.senderPort = senderPort;
        this.resultFiles = resultFiles;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendResult_args args = new sendResult_args();
        args.setSenderIP(senderIP);
        args.setSenderPort(senderPort);
        args.setResultFiles(resultFiles);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("join", new join());
      processMap.put("search", new search());
      processMap.put("sendResult", new sendResult());
      return processMap;
    }

    public static class join<I extends Iface> extends org.apache.thrift.ProcessFunction<I, join_args> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public join_result getResult(I iface, join_args args) throws org.apache.thrift.TException {
        join_result result = new join_result();
        result.success = iface.join(args.requesterIP, args.requesterPort);
        return result;
      }
    }

    public static class search<I extends Iface> extends org.apache.thrift.ProcessFunction<I, search_args> {
      public search() {
        super("search");
      }

      public search_args getEmptyArgsInstance() {
        return new search_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public search_result getResult(I iface, search_args args) throws org.apache.thrift.TException {
        search_result result = new search_result();
        iface.search(args.keyWord, args.requesterIP, args.requesterPort, args.hops);
        return result;
      }
    }

    public static class sendResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendResult_args> {
      public sendResult() {
        super("sendResult");
      }

      public sendResult_args getEmptyArgsInstance() {
        return new sendResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendResult_result getResult(I iface, sendResult_args args) throws org.apache.thrift.TException {
        sendResult_result result = new sendResult_result();
        iface.sendResult(args.senderIP, args.senderPort, args.resultFiles);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("join", new join());
      processMap.put("search", new search());
      processMap.put("sendResult", new sendResult());
      return processMap;
    }

    public static class join<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, join_args, String> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            join_result result = new join_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            join_result result = new join_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, join_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.join(args.requesterIP, args.requesterPort,resultHandler);
      }
    }

    public static class search<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, search_args, Void> {
      public search() {
        super("search");
      }

      public search_args getEmptyArgsInstance() {
        return new search_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            search_result result = new search_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            search_result result = new search_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, search_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.search(args.keyWord, args.requesterIP, args.requesterPort, args.hops,resultHandler);
      }
    }

    public static class sendResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendResult_args, Void> {
      public sendResult() {
        super("sendResult");
      }

      public sendResult_args getEmptyArgsInstance() {
        return new sendResult_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendResult_result result = new sendResult_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendResult_result result = new sendResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendResult(args.senderIP, args.senderPort, args.resultFiles,resultHandler);
      }
    }

  }

  public static class join_args implements org.apache.thrift.TBase<join_args, join_args._Fields>, java.io.Serializable, Cloneable, Comparable<join_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_args");

    private static final org.apache.thrift.protocol.TField REQUESTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("requesterIP", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUESTER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("requesterPort", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new join_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new join_argsTupleSchemeFactory());
    }

    public String requesterIP; // required
    public int requesterPort; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUESTER_IP((short)1, "requesterIP"),
      REQUESTER_PORT((short)2, "requesterPort");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER_IP
            return REQUESTER_IP;
          case 2: // REQUESTER_PORT
            return REQUESTER_PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTERPORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER_IP, new org.apache.thrift.meta_data.FieldMetaData("requesterIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.REQUESTER_PORT, new org.apache.thrift.meta_data.FieldMetaData("requesterPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_args.class, metaDataMap);
    }

    public join_args() {
    }

    public join_args(
      String requesterIP,
      int requesterPort)
    {
      this();
      this.requesterIP = requesterIP;
      this.requesterPort = requesterPort;
      setRequesterPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_args(join_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRequesterIP()) {
        this.requesterIP = other.requesterIP;
      }
      this.requesterPort = other.requesterPort;
    }

    public join_args deepCopy() {
      return new join_args(this);
    }

    @Override
    public void clear() {
      this.requesterIP = null;
      setRequesterPortIsSet(false);
      this.requesterPort = 0;
    }

    public String getRequesterIP() {
      return this.requesterIP;
    }

    public join_args setRequesterIP(String requesterIP) {
      this.requesterIP = requesterIP;
      return this;
    }

    public void unsetRequesterIP() {
      this.requesterIP = null;
    }

    /** Returns true if field requesterIP is set (has been assigned a value) and false otherwise */
    public boolean isSetRequesterIP() {
      return this.requesterIP != null;
    }

    public void setRequesterIPIsSet(boolean value) {
      if (!value) {
        this.requesterIP = null;
      }
    }

    public int getRequesterPort() {
      return this.requesterPort;
    }

    public join_args setRequesterPort(int requesterPort) {
      this.requesterPort = requesterPort;
      setRequesterPortIsSet(true);
      return this;
    }

    public void unsetRequesterPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTERPORT_ISSET_ID);
    }

    /** Returns true if field requesterPort is set (has been assigned a value) and false otherwise */
    public boolean isSetRequesterPort() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTERPORT_ISSET_ID);
    }

    public void setRequesterPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTERPORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER_IP:
        if (value == null) {
          unsetRequesterIP();
        } else {
          setRequesterIP((String)value);
        }
        break;

      case REQUESTER_PORT:
        if (value == null) {
          unsetRequesterPort();
        } else {
          setRequesterPort((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER_IP:
        return getRequesterIP();

      case REQUESTER_PORT:
        return getRequesterPort();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER_IP:
        return isSetRequesterIP();
      case REQUESTER_PORT:
        return isSetRequesterPort();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_args)
        return this.equals((join_args)that);
      return false;
    }

    public boolean equals(join_args that) {
      if (that == null)
        return false;

      boolean this_present_requesterIP = true && this.isSetRequesterIP();
      boolean that_present_requesterIP = true && that.isSetRequesterIP();
      if (this_present_requesterIP || that_present_requesterIP) {
        if (!(this_present_requesterIP && that_present_requesterIP))
          return false;
        if (!this.requesterIP.equals(that.requesterIP))
          return false;
      }

      boolean this_present_requesterPort = true;
      boolean that_present_requesterPort = true;
      if (this_present_requesterPort || that_present_requesterPort) {
        if (!(this_present_requesterPort && that_present_requesterPort))
          return false;
        if (this.requesterPort != that.requesterPort)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requesterIP = true && (isSetRequesterIP());
      list.add(present_requesterIP);
      if (present_requesterIP)
        list.add(requesterIP);

      boolean present_requesterPort = true;
      list.add(present_requesterPort);
      if (present_requesterPort)
        list.add(requesterPort);

      return list.hashCode();
    }

    @Override
    public int compareTo(join_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequesterIP()).compareTo(other.isSetRequesterIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequesterIP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesterIP, other.requesterIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequesterPort()).compareTo(other.isSetRequesterPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequesterPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesterPort, other.requesterPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_args(");
      boolean first = true;

      sb.append("requesterIP:");
      if (this.requesterIP == null) {
        sb.append("null");
      } else {
        sb.append(this.requesterIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requesterPort:");
      sb.append(this.requesterPort);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class join_argsStandardSchemeFactory implements SchemeFactory {
      public join_argsStandardScheme getScheme() {
        return new join_argsStandardScheme();
      }
    }

    private static class join_argsStandardScheme extends StandardScheme<join_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, join_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUESTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requesterIP = iprot.readString();
                struct.setRequesterIPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUESTER_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requesterPort = iprot.readI32();
                struct.setRequesterPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, join_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requesterIP != null) {
          oprot.writeFieldBegin(REQUESTER_IP_FIELD_DESC);
          oprot.writeString(struct.requesterIP);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REQUESTER_PORT_FIELD_DESC);
        oprot.writeI32(struct.requesterPort);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class join_argsTupleSchemeFactory implements SchemeFactory {
      public join_argsTupleScheme getScheme() {
        return new join_argsTupleScheme();
      }
    }

    private static class join_argsTupleScheme extends TupleScheme<join_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequesterIP()) {
          optionals.set(0);
        }
        if (struct.isSetRequesterPort()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequesterIP()) {
          oprot.writeString(struct.requesterIP);
        }
        if (struct.isSetRequesterPort()) {
          oprot.writeI32(struct.requesterPort);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requesterIP = iprot.readString();
          struct.setRequesterIPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requesterPort = iprot.readI32();
          struct.setRequesterPortIsSet(true);
        }
      }
    }

  }

  public static class join_result implements org.apache.thrift.TBase<join_result, join_result._Fields>, java.io.Serializable, Cloneable, Comparable<join_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new join_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new join_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_result.class, metaDataMap);
    }

    public join_result() {
    }

    public join_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_result(join_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public join_result deepCopy() {
      return new join_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public join_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_result)
        return this.equals((join_result)that);
      return false;
    }

    public boolean equals(join_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(join_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class join_resultStandardSchemeFactory implements SchemeFactory {
      public join_resultStandardScheme getScheme() {
        return new join_resultStandardScheme();
      }
    }

    private static class join_resultStandardScheme extends StandardScheme<join_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, join_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, join_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class join_resultTupleSchemeFactory implements SchemeFactory {
      public join_resultTupleScheme getScheme() {
        return new join_resultTupleScheme();
      }
    }

    private static class join_resultTupleScheme extends TupleScheme<join_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class search_args implements org.apache.thrift.TBase<search_args, search_args._Fields>, java.io.Serializable, Cloneable, Comparable<search_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_args");

    private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWord", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUESTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("requesterIP", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REQUESTER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("requesterPort", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HOPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hops", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_argsTupleSchemeFactory());
    }

    public String keyWord; // required
    public String requesterIP; // required
    public String requesterPort; // required
    public int hops; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY_WORD((short)1, "keyWord"),
      REQUESTER_IP((short)2, "requesterIP"),
      REQUESTER_PORT((short)3, "requesterPort"),
      HOPS((short)4, "hops");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY_WORD
            return KEY_WORD;
          case 2: // REQUESTER_IP
            return REQUESTER_IP;
          case 3: // REQUESTER_PORT
            return REQUESTER_PORT;
          case 4: // HOPS
            return HOPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HOPS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("keyWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.REQUESTER_IP, new org.apache.thrift.meta_data.FieldMetaData("requesterIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.REQUESTER_PORT, new org.apache.thrift.meta_data.FieldMetaData("requesterPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.HOPS, new org.apache.thrift.meta_data.FieldMetaData("hops", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_args.class, metaDataMap);
    }

    public search_args() {
    }

    public search_args(
      String keyWord,
      String requesterIP,
      String requesterPort,
      int hops)
    {
      this();
      this.keyWord = keyWord;
      this.requesterIP = requesterIP;
      this.requesterPort = requesterPort;
      this.hops = hops;
      setHopsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_args(search_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeyWord()) {
        this.keyWord = other.keyWord;
      }
      if (other.isSetRequesterIP()) {
        this.requesterIP = other.requesterIP;
      }
      if (other.isSetRequesterPort()) {
        this.requesterPort = other.requesterPort;
      }
      this.hops = other.hops;
    }

    public search_args deepCopy() {
      return new search_args(this);
    }

    @Override
    public void clear() {
      this.keyWord = null;
      this.requesterIP = null;
      this.requesterPort = null;
      setHopsIsSet(false);
      this.hops = 0;
    }

    public String getKeyWord() {
      return this.keyWord;
    }

    public search_args setKeyWord(String keyWord) {
      this.keyWord = keyWord;
      return this;
    }

    public void unsetKeyWord() {
      this.keyWord = null;
    }

    /** Returns true if field keyWord is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyWord() {
      return this.keyWord != null;
    }

    public void setKeyWordIsSet(boolean value) {
      if (!value) {
        this.keyWord = null;
      }
    }

    public String getRequesterIP() {
      return this.requesterIP;
    }

    public search_args setRequesterIP(String requesterIP) {
      this.requesterIP = requesterIP;
      return this;
    }

    public void unsetRequesterIP() {
      this.requesterIP = null;
    }

    /** Returns true if field requesterIP is set (has been assigned a value) and false otherwise */
    public boolean isSetRequesterIP() {
      return this.requesterIP != null;
    }

    public void setRequesterIPIsSet(boolean value) {
      if (!value) {
        this.requesterIP = null;
      }
    }

    public String getRequesterPort() {
      return this.requesterPort;
    }

    public search_args setRequesterPort(String requesterPort) {
      this.requesterPort = requesterPort;
      return this;
    }

    public void unsetRequesterPort() {
      this.requesterPort = null;
    }

    /** Returns true if field requesterPort is set (has been assigned a value) and false otherwise */
    public boolean isSetRequesterPort() {
      return this.requesterPort != null;
    }

    public void setRequesterPortIsSet(boolean value) {
      if (!value) {
        this.requesterPort = null;
      }
    }

    public int getHops() {
      return this.hops;
    }

    public search_args setHops(int hops) {
      this.hops = hops;
      setHopsIsSet(true);
      return this;
    }

    public void unsetHops() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOPS_ISSET_ID);
    }

    /** Returns true if field hops is set (has been assigned a value) and false otherwise */
    public boolean isSetHops() {
      return EncodingUtils.testBit(__isset_bitfield, __HOPS_ISSET_ID);
    }

    public void setHopsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOPS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY_WORD:
        if (value == null) {
          unsetKeyWord();
        } else {
          setKeyWord((String)value);
        }
        break;

      case REQUESTER_IP:
        if (value == null) {
          unsetRequesterIP();
        } else {
          setRequesterIP((String)value);
        }
        break;

      case REQUESTER_PORT:
        if (value == null) {
          unsetRequesterPort();
        } else {
          setRequesterPort((String)value);
        }
        break;

      case HOPS:
        if (value == null) {
          unsetHops();
        } else {
          setHops((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY_WORD:
        return getKeyWord();

      case REQUESTER_IP:
        return getRequesterIP();

      case REQUESTER_PORT:
        return getRequesterPort();

      case HOPS:
        return getHops();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY_WORD:
        return isSetKeyWord();
      case REQUESTER_IP:
        return isSetRequesterIP();
      case REQUESTER_PORT:
        return isSetRequesterPort();
      case HOPS:
        return isSetHops();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_args)
        return this.equals((search_args)that);
      return false;
    }

    public boolean equals(search_args that) {
      if (that == null)
        return false;

      boolean this_present_keyWord = true && this.isSetKeyWord();
      boolean that_present_keyWord = true && that.isSetKeyWord();
      if (this_present_keyWord || that_present_keyWord) {
        if (!(this_present_keyWord && that_present_keyWord))
          return false;
        if (!this.keyWord.equals(that.keyWord))
          return false;
      }

      boolean this_present_requesterIP = true && this.isSetRequesterIP();
      boolean that_present_requesterIP = true && that.isSetRequesterIP();
      if (this_present_requesterIP || that_present_requesterIP) {
        if (!(this_present_requesterIP && that_present_requesterIP))
          return false;
        if (!this.requesterIP.equals(that.requesterIP))
          return false;
      }

      boolean this_present_requesterPort = true && this.isSetRequesterPort();
      boolean that_present_requesterPort = true && that.isSetRequesterPort();
      if (this_present_requesterPort || that_present_requesterPort) {
        if (!(this_present_requesterPort && that_present_requesterPort))
          return false;
        if (!this.requesterPort.equals(that.requesterPort))
          return false;
      }

      boolean this_present_hops = true;
      boolean that_present_hops = true;
      if (this_present_hops || that_present_hops) {
        if (!(this_present_hops && that_present_hops))
          return false;
        if (this.hops != that.hops)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keyWord = true && (isSetKeyWord());
      list.add(present_keyWord);
      if (present_keyWord)
        list.add(keyWord);

      boolean present_requesterIP = true && (isSetRequesterIP());
      list.add(present_requesterIP);
      if (present_requesterIP)
        list.add(requesterIP);

      boolean present_requesterPort = true && (isSetRequesterPort());
      list.add(present_requesterPort);
      if (present_requesterPort)
        list.add(requesterPort);

      boolean present_hops = true;
      list.add(present_hops);
      if (present_hops)
        list.add(hops);

      return list.hashCode();
    }

    @Override
    public int compareTo(search_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(other.isSetKeyWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWord, other.keyWord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequesterIP()).compareTo(other.isSetRequesterIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequesterIP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesterIP, other.requesterIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequesterPort()).compareTo(other.isSetRequesterPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequesterPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesterPort, other.requesterPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHops()).compareTo(other.isSetHops());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHops()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hops, other.hops);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_args(");
      boolean first = true;

      sb.append("keyWord:");
      if (this.keyWord == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWord);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requesterIP:");
      if (this.requesterIP == null) {
        sb.append("null");
      } else {
        sb.append(this.requesterIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requesterPort:");
      if (this.requesterPort == null) {
        sb.append("null");
      } else {
        sb.append(this.requesterPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hops:");
      sb.append(this.hops);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_argsStandardSchemeFactory implements SchemeFactory {
      public search_argsStandardScheme getScheme() {
        return new search_argsStandardScheme();
      }
    }

    private static class search_argsStandardScheme extends StandardScheme<search_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY_WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyWord = iprot.readString();
                struct.setKeyWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUESTER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requesterIP = iprot.readString();
                struct.setRequesterIPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUESTER_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requesterPort = iprot.readString();
                struct.setRequesterPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOPS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hops = iprot.readI32();
                struct.setHopsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyWord != null) {
          oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
          oprot.writeString(struct.keyWord);
          oprot.writeFieldEnd();
        }
        if (struct.requesterIP != null) {
          oprot.writeFieldBegin(REQUESTER_IP_FIELD_DESC);
          oprot.writeString(struct.requesterIP);
          oprot.writeFieldEnd();
        }
        if (struct.requesterPort != null) {
          oprot.writeFieldBegin(REQUESTER_PORT_FIELD_DESC);
          oprot.writeString(struct.requesterPort);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HOPS_FIELD_DESC);
        oprot.writeI32(struct.hops);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_argsTupleSchemeFactory implements SchemeFactory {
      public search_argsTupleScheme getScheme() {
        return new search_argsTupleScheme();
      }
    }

    private static class search_argsTupleScheme extends TupleScheme<search_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyWord()) {
          optionals.set(0);
        }
        if (struct.isSetRequesterIP()) {
          optionals.set(1);
        }
        if (struct.isSetRequesterPort()) {
          optionals.set(2);
        }
        if (struct.isSetHops()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKeyWord()) {
          oprot.writeString(struct.keyWord);
        }
        if (struct.isSetRequesterIP()) {
          oprot.writeString(struct.requesterIP);
        }
        if (struct.isSetRequesterPort()) {
          oprot.writeString(struct.requesterPort);
        }
        if (struct.isSetHops()) {
          oprot.writeI32(struct.hops);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.keyWord = iprot.readString();
          struct.setKeyWordIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requesterIP = iprot.readString();
          struct.setRequesterIPIsSet(true);
        }
        if (incoming.get(2)) {
          struct.requesterPort = iprot.readString();
          struct.setRequesterPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.hops = iprot.readI32();
          struct.setHopsIsSet(true);
        }
      }
    }

  }

  public static class search_result implements org.apache.thrift.TBase<search_result, search_result._Fields>, java.io.Serializable, Cloneable, Comparable<search_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_result.class, metaDataMap);
    }

    public search_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_result(search_result other) {
    }

    public search_result deepCopy() {
      return new search_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_result)
        return this.equals((search_result)that);
      return false;
    }

    public boolean equals(search_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(search_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_resultStandardSchemeFactory implements SchemeFactory {
      public search_resultStandardScheme getScheme() {
        return new search_resultStandardScheme();
      }
    }

    private static class search_resultStandardScheme extends StandardScheme<search_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_resultTupleSchemeFactory implements SchemeFactory {
      public search_resultTupleScheme getScheme() {
        return new search_resultTupleScheme();
      }
    }

    private static class search_resultTupleScheme extends TupleScheme<search_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendResult_args implements org.apache.thrift.TBase<sendResult_args, sendResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendResult_args");

    private static final org.apache.thrift.protocol.TField SENDER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("senderIP", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SENDER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("senderPort", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RESULT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("resultFiles", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendResult_argsTupleSchemeFactory());
    }

    public String senderIP; // required
    public String senderPort; // required
    public String resultFiles; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SENDER_IP((short)1, "senderIP"),
      SENDER_PORT((short)2, "senderPort"),
      RESULT_FILES((short)3, "resultFiles");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SENDER_IP
            return SENDER_IP;
          case 2: // SENDER_PORT
            return SENDER_PORT;
          case 3: // RESULT_FILES
            return RESULT_FILES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SENDER_IP, new org.apache.thrift.meta_data.FieldMetaData("senderIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.SENDER_PORT, new org.apache.thrift.meta_data.FieldMetaData("senderPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.RESULT_FILES, new org.apache.thrift.meta_data.FieldMetaData("resultFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendResult_args.class, metaDataMap);
    }

    public sendResult_args() {
    }

    public sendResult_args(
      String senderIP,
      String senderPort,
      String resultFiles)
    {
      this();
      this.senderIP = senderIP;
      this.senderPort = senderPort;
      this.resultFiles = resultFiles;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendResult_args(sendResult_args other) {
      if (other.isSetSenderIP()) {
        this.senderIP = other.senderIP;
      }
      if (other.isSetSenderPort()) {
        this.senderPort = other.senderPort;
      }
      if (other.isSetResultFiles()) {
        this.resultFiles = other.resultFiles;
      }
    }

    public sendResult_args deepCopy() {
      return new sendResult_args(this);
    }

    @Override
    public void clear() {
      this.senderIP = null;
      this.senderPort = null;
      this.resultFiles = null;
    }

    public String getSenderIP() {
      return this.senderIP;
    }

    public sendResult_args setSenderIP(String senderIP) {
      this.senderIP = senderIP;
      return this;
    }

    public void unsetSenderIP() {
      this.senderIP = null;
    }

    /** Returns true if field senderIP is set (has been assigned a value) and false otherwise */
    public boolean isSetSenderIP() {
      return this.senderIP != null;
    }

    public void setSenderIPIsSet(boolean value) {
      if (!value) {
        this.senderIP = null;
      }
    }

    public String getSenderPort() {
      return this.senderPort;
    }

    public sendResult_args setSenderPort(String senderPort) {
      this.senderPort = senderPort;
      return this;
    }

    public void unsetSenderPort() {
      this.senderPort = null;
    }

    /** Returns true if field senderPort is set (has been assigned a value) and false otherwise */
    public boolean isSetSenderPort() {
      return this.senderPort != null;
    }

    public void setSenderPortIsSet(boolean value) {
      if (!value) {
        this.senderPort = null;
      }
    }

    public String getResultFiles() {
      return this.resultFiles;
    }

    public sendResult_args setResultFiles(String resultFiles) {
      this.resultFiles = resultFiles;
      return this;
    }

    public void unsetResultFiles() {
      this.resultFiles = null;
    }

    /** Returns true if field resultFiles is set (has been assigned a value) and false otherwise */
    public boolean isSetResultFiles() {
      return this.resultFiles != null;
    }

    public void setResultFilesIsSet(boolean value) {
      if (!value) {
        this.resultFiles = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SENDER_IP:
        if (value == null) {
          unsetSenderIP();
        } else {
          setSenderIP((String)value);
        }
        break;

      case SENDER_PORT:
        if (value == null) {
          unsetSenderPort();
        } else {
          setSenderPort((String)value);
        }
        break;

      case RESULT_FILES:
        if (value == null) {
          unsetResultFiles();
        } else {
          setResultFiles((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SENDER_IP:
        return getSenderIP();

      case SENDER_PORT:
        return getSenderPort();

      case RESULT_FILES:
        return getResultFiles();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SENDER_IP:
        return isSetSenderIP();
      case SENDER_PORT:
        return isSetSenderPort();
      case RESULT_FILES:
        return isSetResultFiles();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendResult_args)
        return this.equals((sendResult_args)that);
      return false;
    }

    public boolean equals(sendResult_args that) {
      if (that == null)
        return false;

      boolean this_present_senderIP = true && this.isSetSenderIP();
      boolean that_present_senderIP = true && that.isSetSenderIP();
      if (this_present_senderIP || that_present_senderIP) {
        if (!(this_present_senderIP && that_present_senderIP))
          return false;
        if (!this.senderIP.equals(that.senderIP))
          return false;
      }

      boolean this_present_senderPort = true && this.isSetSenderPort();
      boolean that_present_senderPort = true && that.isSetSenderPort();
      if (this_present_senderPort || that_present_senderPort) {
        if (!(this_present_senderPort && that_present_senderPort))
          return false;
        if (!this.senderPort.equals(that.senderPort))
          return false;
      }

      boolean this_present_resultFiles = true && this.isSetResultFiles();
      boolean that_present_resultFiles = true && that.isSetResultFiles();
      if (this_present_resultFiles || that_present_resultFiles) {
        if (!(this_present_resultFiles && that_present_resultFiles))
          return false;
        if (!this.resultFiles.equals(that.resultFiles))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_senderIP = true && (isSetSenderIP());
      list.add(present_senderIP);
      if (present_senderIP)
        list.add(senderIP);

      boolean present_senderPort = true && (isSetSenderPort());
      list.add(present_senderPort);
      if (present_senderPort)
        list.add(senderPort);

      boolean present_resultFiles = true && (isSetResultFiles());
      list.add(present_resultFiles);
      if (present_resultFiles)
        list.add(resultFiles);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSenderIP()).compareTo(other.isSetSenderIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSenderIP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderIP, other.senderIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSenderPort()).compareTo(other.isSetSenderPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSenderPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderPort, other.senderPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResultFiles()).compareTo(other.isSetResultFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultFiles, other.resultFiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendResult_args(");
      boolean first = true;

      sb.append("senderIP:");
      if (this.senderIP == null) {
        sb.append("null");
      } else {
        sb.append(this.senderIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("senderPort:");
      if (this.senderPort == null) {
        sb.append("null");
      } else {
        sb.append(this.senderPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resultFiles:");
      if (this.resultFiles == null) {
        sb.append("null");
      } else {
        sb.append(this.resultFiles);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendResult_argsStandardSchemeFactory implements SchemeFactory {
      public sendResult_argsStandardScheme getScheme() {
        return new sendResult_argsStandardScheme();
      }
    }

    private static class sendResult_argsStandardScheme extends StandardScheme<sendResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SENDER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.senderIP = iprot.readString();
                struct.setSenderIPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SENDER_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.senderPort = iprot.readString();
                struct.setSenderPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESULT_FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.resultFiles = iprot.readString();
                struct.setResultFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.senderIP != null) {
          oprot.writeFieldBegin(SENDER_IP_FIELD_DESC);
          oprot.writeString(struct.senderIP);
          oprot.writeFieldEnd();
        }
        if (struct.senderPort != null) {
          oprot.writeFieldBegin(SENDER_PORT_FIELD_DESC);
          oprot.writeString(struct.senderPort);
          oprot.writeFieldEnd();
        }
        if (struct.resultFiles != null) {
          oprot.writeFieldBegin(RESULT_FILES_FIELD_DESC);
          oprot.writeString(struct.resultFiles);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendResult_argsTupleSchemeFactory implements SchemeFactory {
      public sendResult_argsTupleScheme getScheme() {
        return new sendResult_argsTupleScheme();
      }
    }

    private static class sendResult_argsTupleScheme extends TupleScheme<sendResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSenderIP()) {
          optionals.set(0);
        }
        if (struct.isSetSenderPort()) {
          optionals.set(1);
        }
        if (struct.isSetResultFiles()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSenderIP()) {
          oprot.writeString(struct.senderIP);
        }
        if (struct.isSetSenderPort()) {
          oprot.writeString(struct.senderPort);
        }
        if (struct.isSetResultFiles()) {
          oprot.writeString(struct.resultFiles);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.senderIP = iprot.readString();
          struct.setSenderIPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.senderPort = iprot.readString();
          struct.setSenderPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.resultFiles = iprot.readString();
          struct.setResultFilesIsSet(true);
        }
      }
    }

  }

  public static class sendResult_result implements org.apache.thrift.TBase<sendResult_result, sendResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendResult_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendResult_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendResult_result.class, metaDataMap);
    }

    public sendResult_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendResult_result(sendResult_result other) {
    }

    public sendResult_result deepCopy() {
      return new sendResult_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendResult_result)
        return this.equals((sendResult_result)that);
      return false;
    }

    public boolean equals(sendResult_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendResult_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendResult_resultStandardSchemeFactory implements SchemeFactory {
      public sendResult_resultStandardScheme getScheme() {
        return new sendResult_resultStandardScheme();
      }
    }

    private static class sendResult_resultStandardScheme extends StandardScheme<sendResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendResult_resultTupleSchemeFactory implements SchemeFactory {
      public sendResult_resultTupleScheme getScheme() {
        return new sendResult_resultTupleScheme();
      }
    }

    private static class sendResult_resultTupleScheme extends TupleScheme<sendResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
